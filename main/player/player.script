local scoresave = require "main.saving.scores"
local C = require "main.player.health"
local D = require "main.player.score"
local scores = require "main.saving.scores"
function init(self)
	msg.post(".", "acquire_input_focus")
	
	pprint("camera request")
	
	msg.post("camera", "follow")

	self.follow = true
	self.health = 3
	self.moving = false
	self.firing = false
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0)
	self.speed = 150
	self.mbp = 0
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)

	
	
	if self.follow == true then
		
		msg.post("camera", "follow")
	end
	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
		
	end

	if self.firing then
		local angle = math.atan2(self.dir.y, self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		local props = { dir = self.dir }
		factory.create("#playerfactory", nil, rot, props)

	end
	
	self.input.x = 0
	self.input.y = 0
	self.moving = false
	self.firing = false

end

function on_message(self, message_id, message, sender)

	
	if message_id == hash("contact_point_response") and message.other_group == hash("border") then 
		pprint(message)
		go.set_position(go.get_position() + (message.normal * message.distance))
	end
	
	if message_id == hash("speedup") then
		self.speed = 200
	end

	
		
	
	local health1 = C.getHealth()
	local damaged = true
	
	if message_id == hash("dot") then
		local dotcount = 5
		for i = 0, dotcount do
			
			i = i + 1
			local del = nil
			del = timer.delay(10, false, function()
				
				C.spiderhit()
				del = nil
				
			end)
			
			del = nil
		end
		
	end
	
	if health1 <= 0 and message_id == hash("contact_point_response") then
		msg.post("main:/proxies#main", "playerdeath")
		go.delete()
	end	
	
	if message_id == hash("icestaff") then
		--while health1 > 0 do
		--	msg.post("enemyspawner#knight", "slowed")
		--	msg.post("enemyspawner#shadowbat", "slowed")
		--	msg.post("enemyspawner#slime", "slowed")
		--	msg.post("enemyspawner#spider", "slowed")
		--end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("move_up") then
		self.input.y = 1
	elseif action_id == hash("move_down") then
		self.input.y = -1
	elseif action_id == hash("move_left") then
		self.input.x = -1
	elseif action_id == hash("move_right") then
		self.input.x =  1
	elseif action_id ==hash("fire") and action.pressed then
		self.firing = true
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end

